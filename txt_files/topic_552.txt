(Iposted this somewhere else, but I think it's better to start a discussion topic.... Hello all Scratch users. I just learned Scratch (briefly) at NECC09, and I need to teach it to my students. They are in high school, but this will be there first exposure to programming of any type, so Ithink it'll be fun. Does anyone have a curriculum that I could follow to help the students learn it step by step, and not just "make it work", but learn some of the why's and terminology? Or suggestions for which projects Ishould teach/have them learn first, second, etc. All suggestions are welcome! THANKS!

Hi Laurie, There's a lot out there that you might be interested in, but here's some of what I've tried: Scratch programming concepts- This handout documents some of the core computational concepts in Scratch. It's a bit abstract (in that it's not step-by-step), but it might help you think about how you want to help your students get started with Scratch. Design studio activities - This is a collection of design activities. Again, it's not step-by-step, but it might inspire different types of activities to try. Beyond the looking - This is a seven-part workshop that a colleague and I conducted over several months with a group of middle-school students. Although it's connected to a storytelling/empathy theme, each activity describes the blocks that are introduced, which might be of interest to you. Learn Scratch - I don't have experience with this set of resources, but I know others have used it and have liked it. It's a series of lesson plans and video tutorials for Scratch. There's more available -- both on ScratchEd and soon to be added. I look forward to hearing about what you try! Hope that helps, Karen

One more thing...I was reading Linda's post about how she gets started with Scratchand I realized that I forgot to mention the Scratch cards! I think the cards are a really great way to give students freedom to explore different code excerpts that they can then build up into interesting projects.

From my experience running several Scratch classes, kids really want to make computer games right away. So resources such as lists of game mechanics with popular game examples really help them brainstorm. What Imostly end up doing is letting kids work on their own ideas most of the time, since that's what they want to do, and then devoting 10-20 minutes out of every hour to showing them a connection of a couple of particular Scratch commands to game mechanics. Connection examples: Sensing - Touching color, with Motion - Go to x, y for the maze game mechanic (teleport to the start of the maze upon touching walls) Motion - Point toward sprite, with Motion - Move steps, for chase and resource collection game mechanics (think Pac Man) Looks - Change Effect, with Sounds, for win/lose notification mechanics As students develop projects, they can have an ongoing collection of these, similar to the format Istarted, but with examples of their own projects, either on a poster on the wall, or on the web. I taught a Scratch class this Spring with only six 75-minute meetings, and some students who never programmed before. I did no formal introduction of computer terms, and indeed very little (probably 20 minutes total) discussions overall, other than helping with particular project questions. However, at the end of the class I went through a basic vocabulary list from a Computer Science 101 class, such as "conditional statement" and "infinite cycle". Students were able to make examples for EVERYSINGLETERMfrom their own projects and those of classmates. It felt like magic.

well, i went through the entire learnscratch.org tutorials and i think they're suitable to learn the language step-by-step, with a very gentle introduction to programming; my feeling is that the first two parts may be simply given directly to students since they are very simple, but if the kids are really young they may appear somehow long; by the way, i strongly appreciate the approach outlined in the first reply, since i think that it is more engaging to give young students free (yet assisted) time to explore the language and - then - cook down the CS concepts behind

I agree with Roberto. I found the learnscratch.org tutorials to be very useful indeed. I start off with the really basics (movement). I use classroom management software to lock the learners input devices and blank their screens while I demonstrate some theory over the data projector. This is usually preceded by: Imagine we were designing our very own game, where our hero had to walk around a house blah, blah, blah. I show them how its done, and emphasize that there could be other ways to do it. I unlock their computers and have them repeat what I showed them. So, I found the LOOK & LISTEN, then DO approach to work rather well.They get bored with this if you carry on too long, so be sure to follow with a mini project. My grade 6s are now in the mid-stage of designing their own games in teams of 4. And I am absolutely amazed at some of their projects. No doubt, Im the one with the knowhow BUT, they are the ones with the imagination.

I have just posted up our revised redware lesson plan at http://scratch.redware.com/lessonplan.html. The plan is suitable for 7-12 year olds learning Scratch over 6-8 sessions. I hope to revise the accompanying videos soon and post onto youtube. Please let me know if you like them or give me any ideas for improvements. They are not as comprehensive as the learnscratch tutorials but leave a lot of room for children to investigate by themsleves whilst ensuring that the basics are understood.

I'm thinking of creating a curriculum for a group of students ages from 13-15 to teach Programming concepts using Scratch. The number of hours I'm looking into is about 100 hours stretched across 3 years. Is that too long?

The 100 hours doesn't seem long to me, but I don't have an intuition about the 3 years. When kids are working on designing their own projects, it's amazing how quickly the time flies by!

