Hello, Iam teaching Scratch in a HS Intro to Programming course and am hoping to spend a few weeks on it before moving forward. Ihave a couple questions: 1)How long would you give students to create a simple game? Iwant them to be comfortable with it so they can push the envelope but I also dont want to spend too much time on Scratch as Ithink it would be important to move on. Would 3 weeks be adequate? 2)What would be a good task to prove mastery of the programming concepts available in Scratch? Hangman will utilize several of the programming concepts such as loops, variables/lists, booleans, etc. Any other thoughts? Thanks for any input you may have Omar

Hi Omar, A Hangman game project sounds fun. You might be interested in checking out this Hangman game assigment and rubric posted by a fellow HS Scratch educator - http://scratched.media.mit.edu/resources/hangman-game-project-and-grading-rubric. I could also imagine other types of projects like stories, simulations, or interactive art, that might include some of the programming concepts you mentioned. If there are particular concepts that you have in mind, you could also pose the project assignment based on those items. For instance, what if you gave the students a list of the concepts/blocks/requirements you would like them to exercise in the Scratch project, but leave the genre and project theme open? Would love to hear more about what you decided to do! M

Omar, Scratch is great for introducing and reinforcing so many programming concepts. Here are some ideas from the ScratchEd community: 1. Design an interactive pencil that wears down and draws thicker lines as it writes(animation with costume changes) 2. Create a magic 8 ball that shakes and answers questions (lists, variables and random numbers) 3. Design a project using only an orange circle and purple square With each of these projects you will be amazed at the variations and how quickly students learn the concepts independently. If your time is limited, assign the sprite creations for homework or limit the number of sprites. Scratchers get easily drawn in to the sprite and background designs.

I recently created a Hangman game and I found it surprisingly complex in Scratch and I required a few workarounds. There might be simpler approaches (I was using a different sprite for each letter, and so had to convert letters into costume numbers via a list) but I'm not sure it's ideal for beginners. I'll take a look at that resource Michelle has recommended to see how they did it! :-) Scratch takes care of collision detection which is hard in many other programming languages, so Scratch is well optimised for making arcade style games, and there's a lot of latitude in how sophisticated they can be, so students can tailor their game to their own level of expertise and curiosity. An arcade game might be the obvious thing to try. I ran a session for adults recently where I got them to write a game where balls bounce around randomly, and the cat has to dodge them. That had quite a small scope but still provided a reasonable challenge to them. It took them about an hour to do, using a guided worksheet that gave hints and tasks. Quite simple things can pose a challenge too. I got my group to work out how to draw a circle, after showing them the drawing tools and the repeat tool. That required the kind of creative thinking that programmers routinely do, and proved quite challenging as a warm-up.

