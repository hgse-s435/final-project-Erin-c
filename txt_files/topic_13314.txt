Hi all. I joined Scratch Ed long ago and quickly left and never came back. Instead, I began teaching Scratch users nightly in the All About Scratch forum (which has since changed titles) by helping them with their projects. My biggest concern was that hereat Scratc Ed,there seemed to be a lot of education terminology and normal school philosophy thrown about but it seemed like very few people actually understood Scratch programing. I hope this has changed! Please understand, I am not trivializing the hard work and good intentions of so many people. I just think that if you are going to teach it, you need to understand it and that takes more effort than organizing a lesson plan and maintaining order in a classroom. I have almost a lifetime of association with education in many forms and the inflexibility often forced in a classroom environment is a terrible thing and a crutch for those who don't have an acceptable level of competency. The reason I am making this post is because I was contacted and asked to provide a lesson plan for a week long PicoBlocks class as I have taught a similar class before. PicoBlocks is a version of Scratch designed to interface Scratch programing with motorized Legos like the WeDo system. It utilizes a sensor board and is a lot of fun, which is critical to my way of teaching. Below is my emailed response, provided for you as a glimpse into a successful realization of implementing Scratch/PicoCrickets into a classroom along with some contemporary approaches to learning. I hope it inspires more of the same :) ___________________________________________________________________________________ (My old Scratch Ed post..) I teach classes at a local museum using PicoBlocks along with the WeDo. PicoBlocks is a version of Scratch written specifically to interface the WeDo system along with the PicoCricket system. I have done both single day/ 3 hour classes and week long/ 4hour per day classes. So I have not established any set curriculum, especially that would apply to a long term class session however I would be happy to provide any help if desired. zac_ray@fastmail.fm I also have a Scratch projects gallery, some of which I have used in my classroom here.(http://scratch.mit.edu/users/Locomule) (the emailed request I recently received..) I was wondering if you have since written a plan/outline of something you use in a week long camp??? (and my reply, the point of this rambling, sorry..) I haven't created a lesson plan but would be glad to help if possible. Not knowing a potential instructors competency level with PicoBlocks-type programing is the biggest obstacle that I foresee. Otherwise, I would need to know classroom details.. exact # of class days and how many hours per day approximate # of students and ages # of instructors # of computers running PicoBlocks in the classroom what WeDo or Lego sets are going to be used Otherwise, I could provide some general concepts to be taken into consideration based on my experiences.. You cannot teach kids to program in a week so don't plan on it, especially when combining programing with Legos. But that is OK :) and all the more reason an instructor needs to be fluent in Pico programing. Classroom time will be limited so you must be able to teach and write and debug simple programs with confidence. Most kids will not want to learn the programing either, not once they see each other building Lego projects. I had the benefit of being allowed to teach my way, and I am not a big fan of typical lesson plans. I use them as guides, not hard and fast maps but then again, I am also an entertainer so I am fast on my feet. I prefer to be dynamic and respond to the changing needs of my classroom on the fly. I print out more activities, plans, etc than I need and divide them into 1) Gotta do cool stuff and 2) Kinda cool stuff. Likewise, I separate these into groups based on how much time they take up. This allows me to make sure that the best information gets experienced while throwing in quick lessons in moments of extra time. If I run out of time, I know that I am leaving out my least favored stuff. I'll touch on something at the end of this message called Tinkering and how it fits into my teaching style and PicoBlocks. I first spent showed off some Scratch games and stuff of my own, with a brief demonstration of how Pico blocks get put together in a program. (Scratch is the program that PicoBlocks is derived from and is almost the same thing) Our PicoCrickets came with cards that had various project ideas. My students picked some out and made musical Play-doh, a door alarm for our classroom, light sensors that set off multi-colored lights and various sounds such as cats meowing, horns, etc through a speaker. We did many other projects as well. We spent most of one day building projects that came with each WeDo kit. Some built moving sculptures, others built motorized windmills, etc. Between classes, I used a couple of kits to make a motorized car with headlights that you could steer. I told them that we would do something similar on the last day. But by then I realized that we could not, as a class, build individual Pico-driven cars and had too many students to build a single car. Instead, we made a drag race track for them to race simple, custom-made, non-Pico Lego cars on, complete with a Pico driven drag strip with a start/finish timing system with a red/yellow/green start light tree that lit up with slightly randomized light intervals. The students loved making the cars and then re-working them to improve their designs between races to make them faster. We made a big scoreboard on cardboard. It has been a while since I did this so I have forgotten many things, I'm sure. Since I did taught PicoCrickets, I have become very good at Scratch programing. I have also been sent to the Exploratorium Museum in San Francisco and learned about Tinkering. Tinkering is the evolution of education as facilitated in a museum environment. Sounds like a mouthful but it is really cool. The concept is based on the idea that we all learn in different ways so why force someone to use method A and ignore method B? For example, one Tinkering project I participated in involved our group walking into a space that had 3 tables filled with odds and ends... spools, wires, batteries, small 1.5v dc motors, glue guns, masking tape, tongue depressors, plastic cups, etc. Simple craft supplies. We were given minimal instruction, other than being shown how to hook batteries up to motors and how to use glue sticks to make an offset weight to attach to the motor. Our goal was to make simple bots that moved around. Afterwards, we discussed our individual methodologies. Some people looked at the supplies and thought, "Hmmm, what could I make out of that?" Others came up with a mental image of their bot and then sought materials to make it with. That is exactly the point, we all still learned but in ways that made sense to the individual learner. Tinkering is a way to provide open-ended solutions to a problem so that your audience can solve it their own way. In essence, they teach themselves. Your job as a facilitator is to answer questions, give simple examples, and occasionally inspire more thinking by saying "What if you...?" The reason I mention Tinkering is because my teaching style runs very parallel to Tinkering philosophy. That is why to others, my "lesson plans" probably look rather vague. There is no "9:00 am do this 10:30 do that" etc. Unless you repeat the same courses for many years, you won't know exactly how long things will take or how popular they will be with your students. My #1 rule in my classroom is that we have fun, and do we ever. Once the kids are having fun, they become inquisitive and begin teaching themselves and each other. You move from instructor to facilitator, but you have to be keenly aware of what is going on and quick to recognize when to jump in, jump out, or just observe. For example, one of the first questions once we started Lego drag racing was "Why does my car keep losing?" I (deliberately) said "Friction" and turned around as if to walk off. "What is that?" was the cry from me behind me so I turned back and said "Ok, take one shoe off and leave the other on. Now slide the socked foot, then try to slide the other foot with the shoe still on it. The reason the shoed foot won't slide is easy IS friction!" Then we got into how axles must rub against other parts of the car creating friction, how different wheels had varying properties of friction and smoothness of circular motion. Friction was good for winning on our race course, but what about stopping a real car? Now you need friction, big-time! In essence, we were Tinkering. It was a great experience. I'm sorry this message is so long but I didn't know how else to explain a Zac Ray lesson plan, heh. I judge my success on a few simple factors. I taught at a museum during the summer. Parents who often were just looking for baby-sitting with an edge called back wanting to sign their kids up for "whatever classes Mr. Zac is teaching." When it was time for lunch or to go home, students had to be forced out of their chairs. Take me out of the equation because I am the least important factor and imagine a classroom where kids have fun learning and don't want to stop. It is a beautiful thing! Seeing this happen in a public school setting is a dream of mine. Time after time, I saw public school teachers come in to teach other classes with that antiquated "I'm gonna turn the lights on and off until you all settle down" mentality and the kids suffered for it. Learning became a drag, and who wants to be involved in that? No one, even if you force them to do it anyway. (end of email message) ___________________________________________________________________________________ Lastly, here are someTinkering links.. http://tinkering.exploratorium.edu/activities/ http://blogs.exploratorium.edu/tinkering/

