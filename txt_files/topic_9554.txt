I teach 8 grade Computer Studies and am interested in introducing some element of computer programming in class.In Computer Studies we use Moodle and don't really have a curriculum designed for next year's 8th grade class yet.Currently they are doing the 7th grade program as it is all new and they did not do it last year in 7th grade. Personally I have extensive undergrad academic experience with Java, although I don't have the mindset for it and dislike programming.I am not very good at it.However, at the 8th grade level I think that I could get by.Is Scratch something that I could use to introduce students to the concepts of programming?I have also heard about Alice.What are the main differences between Scratch and Alice?If Scratch is for me, how do I go about getting some training / direction so that I could develop a few units in programming for my class? We are limited to about 10 weeks per class.Im not sure if I could get approval to spend the full 10 weeks on programming.Do you have a recommended amount of time that I could get through a good unit or two with a nice deliverable or project to show for the efforts at the end? The Computer Studies program has traditionally had a bad reputation among students.I am trying to find some way to make it more interesting to students, especially at the 8th grade level.Typically, projects they can do with minimal talking from me is ideal.This class should be fun! Any advice, guidance, assistance you can offer is greatly appreciated.

Hi Christian, You might be interested in this articlehttp://web.media.mit.edu/~jmaloney/papers/AliceGreenfootScratch.pdfthat discusses the differences between Scratch and Alice. As for curricular sequences, I'd recommend exploring the Resources section of ScratchEd. Some resources that you might find useful are: http://scratched.media.mit.edu/resources/getting-started-guide http://scratched.media.mit.edu/resources/exploring-computer-science http://scratched.media.mit.edu/resources/video-courses-learnscratchorg http://cs4hs.media.mit.edu/resources.html As for professional development, we host monthly meetups at MIT, if you're in the Boston area. We'll also be hosting longer-format sessions this summer, such as the 3-day Creative Computing workshop. Hope that helps! K

Short answer is yes, there are ways to connect Scratch to programming. I'm not seeing how to post documents to this forum so the following links may be of interest: 1) Scratch / Alice / Greenfoot / Java topics and a path through freely available tools: -https://files.me.com/javageek/c5sk7y (461KB PDF) 2) Scratch to Greenfoot - using a game as an example of programming concepts from Scratch to Java -https://files.me.com/javageek/pe88f7 (7MB PDF) I usually suggest that not all students will want to become programmers, any more than each person that likes to look at stars will want to become a professional telescope builder. We need people skilled in building telescopes and using telescopes, but a lot of people will simply want to enjoy the end result and the ability to peer into the universe at their fingertips. Correspondingly, it's important for students to understand how programming works and examples like Scratch extended to BYOB (http://inst.eecs.berkeley.edu/~cs10/sp11/) for CS Principles (http://csprinciples.org) pilot courses as introduction to programming and computer science, those are good examples of Scratch as a "low floor" entry point for the topics. I'm very interested in the problem solving skills and creativity it takes to go from a blank (scratch, alice, greenfoot, other...) project to a working game, simulation or story that's fun and/or useful. There are programming and problem solving pieces that go into making that game, story or simulation, and you can certainly get students started on that path with Scratch, and continue on to various programming topics as part of the problem solving / creative objectives.

