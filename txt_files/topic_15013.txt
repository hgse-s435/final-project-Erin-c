Notes by Rupangi Sharma from the Next Steps breakout session at the November 2012 Scratch Educator Meetup Pamela spoke eloquently about how it is important to be explicit about the learning objectives and goals that the students will be achieving so that they can measure how much they have learnt, on their own and get excited by their progress when they see it happen. We discussed Scratch and how it is often seen as a stepping stone to other programming languages and stressed the importance of recognizing Scratch as a programming language that holds its own because it has a lot of capabilities. ----- Notes by Laura Johnson Pam _ inherited a curriculum that she tweaked and is coming from an AP Computer Science background (more traditional) _ has to make a shift from teacher to facilitator; is learning and teaching at the same time  has given her perspective of what her students are going through and the students can point out holes in the curriculum/lessons Processing addresses Scratchs limitations Why not Python? Colin doesnt know Python; Processing is what Arduino uses (big in the Maker world) PROBLEMS WITH THE SWITCH Method Syntax Variables Instantiation of objects Scratch is real programming and powerful but doesnt look like it. Things that prompt students to want to switch Complicated things with sounds Wanted to use the webcam Fiducials? Scratch vs. Processing Flags vs. code Dont need to code variables vs. coding for variables/heavy usage of variables Blocks vs. code Kids can troubleshoot (syntax errors arent a challenge) vs. teachers troubleshoot to find small details Allows for creativity, can work on big picture concepts vs. frustrated by small details in code Scratch 2.0 could fix some of the transition issues Cloning = instantiation Make a block = parameters To make the switch Project done in Scratch and same project done in Processing Parallel teaching _ out of comfort zone and then back to Scratch; build up tolerance for frustration

