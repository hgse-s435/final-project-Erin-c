Hi all! Thank you for taking the time to read this; I am sorry it is so long, but I am looking for advice, and maybe some critique as to what I did wrong the first time. I am a librarian, NOT really a trained teacher, andI appreciate any help I can get! ?I work for a public library that offers after school and summerS.T.E.A.M.-based classes and programs. Last spring (2016)I was asked to do aone hourintroduction to Scratch as a part of this program because our youth director noticed I was helping a few students who had questions about Scratch. I agreed to do theclass and put together what I thought would be a great hour for the kids, but it was kind of a chaotic disaster. Here's what I did: ?1) Had them watch a short, excitingintroductory video that demonstrated all the fun things you can do with Scratch. (This can be found here:https://vimeo.com/65583694 ?) ?2) Showed thema VERY short powerpoint (2 slides)with a few common coding and Scratch terms. Ihad students from many backgrounds and skill levels, so I just wanted to make sure we all knew what "coding" meant, and what a"script" was, etc. There were only 5 termsin the entire powerpoint. ?3) Then we went to Scratch online and played around withsome of theshared projects, just so they could see what other people were doing. (We only did this for about 5-7 minutes). ?4) Ihad them open a blank project and did a quick overview of all the different parts of Scratch (scrpit area, stage, sprites, etc...), which I figured wasa good idea since most of the kids had never tried Scratch before. ?5) We then launched in to creating a small game that I had chosen in advance. The game was Star Hunter ?from one of the Scratch books I was using at the time. The title escapes me at the moment, as I was working with about 4 different books. ?6) Then, at the end of the class, I had a whole packet of materials for them to take home: Scratch cards, some free Scratch stickers that I got at a library conference, anew game for them to try, an info sheet for parents, a Scratch book list, and a small vocabulary list to help them understand some of the coding terms they would encounter. ?I HAD PROBLEMS. Phew! As you can imagine, this was a lot to cram into an hour, andwe ended up running about an hour and fifteen minutes. This kind of irked some of the parents who were waiting outside ofour computer lab to pick up their kids, so I need to trim some of the fat and smooth out some of the "wrinkles". Here are the problems I encountered: ?- As I mentioned in the subject line, theclass is for ages 8 to 12. I had a really hard time getting this age group to follow what I was doing. They wanted to branch off on thier own right away and some of them made quite a mess of the program we were trying to make. I had to fix these kids' code before we could move on, taking up precious time. ?- They were just not interested in any of the preliminary stuff that I did (#'s 1-4 above). They all sat there, deadpan, looking at me like I had 2 heads. Maybe this is normal for that age group?Should I just scratch those parts completely? Maybe just the video? Shoud I assume these kids are learning these terms at school? Arrrgh!! ?- I thought I had chosen a really cool game for them to make. I was corrected right away (kids are honest like that, eh?). The game took too long to make, they didn't want to be locked into the sprites and backgrounds that I pre-chose to save time, and some of them didn't even bother to try and make the game I selected. I eventually just let thosekids create and explore on thier own with the understanding that if they needed my help it would have to be after the class. ?- Being a library, our publiccomputers do not have external speakers.Public users can bring headphones to use, and we have headphones for our adult computer classes,but Iwas not going to give the 8 - 12 year olds headphones because I figured they would never pay attention to me that way!The kids were all very disappointed that they could add sounds to their project but notnear what they sound like. I had a set of speakers that I attached to the admin computer so I could play them examples of the sounds, but this was not fulfilling for them. I don't know what I'm going to do about this. Even if I could scare up 12 sets of speakers for the class, I can only imagine the noise this would create. ?- They were not really interested in the packets I made so I felt like I failed to pique their interest. I know that we are a digital society now, and kids especially so, so maybe they are just not used to getting information this way.Most of the information I put in the take home packets is available online, anyway, so I will probably just skip this next time. Most of the online help I have found so far is for an entire 10-12 week Scratch curriculum. I do not need this much material. Any suggestions? Has anyone else taught a short introductory class like this? ?My thoughts are to cut out the vocab. power point and the Scratch overview (I would just explain as we went) and to then just have a ton of ideas to get the kids started on whatever they feel like making. I could have scratch cards and print off some small projects for the kids to try (if they want), and then just sort of float the room and help them individually. Last time, this is what I ended up doing for most of the class anyway. I think more freedom to create might be a better idea than trying to drag them all through a lengthy peice of Scratch code. Thoughts on this plan? ?Thank you so very much if you have made it this far. This is a long shot cry for help (lol), and I am sure that I will figure out something for them to do... but I thought if someone with more experience could weigh-in that it might help me.

Amy, I hope you get responses to your question. I'm trying to do a similar program at a local library using the 7 session scratch creative coding curriculum. Thanks, ~Nate

I hope so, too Nate! ?I have pretty much decided against trying to drag them all through another whole set of specificgame code. In my experience,they get distracted, don't listen because they're too busy trying out their own ideas, and you end up having to stop the class, fix and/or delete everything they're trying to add to the code, and then back up two or three steps because they didn't catch what you were talking about while they were making ten different colored sprites. LOL. ?I am strongly leaning toward more creative freedom for the class, but I am not really sure how to implement such a plan without resulting in pure chaos. An hour is probably not enough time to help 10 or 12 students with individual projects. Add to that the fact that we are not creating individual accounts for these kids (we are leaving that up to the parents if the kids want to pursue Scratch after the class) so theycan't save any of their work. If they want to continue working on their projects this is going to be a problem! ?I will post my final lesson plan on here, whether I get any responses or not! Amy

Hi Amy, when I write my activities, I've find that kids that age tended to zone out if we didn't get straight into 'doing things', at least for the first lesson. Something I've noticed about the activities in books, is that they seem more aimed at kids sitting at home, in a one-on-one setting, with more than an hour to read through. For your 1) rather than showing them a video, it could be just as easy to get them to actually make their own example. It keeps everyone engaged, and you can see those that get stuck straight away, and help them get their code working too. For this, you'd just want to have your screen up on a projector, and then have everyone follow along. It doesn't have to be really involved, just a simple loop. The one I've seen done well, is hooking in sound or visual input into movement of a sprite: look under 'Sensing' for 'loudness' or 'video' blocks. That will give them an fairly instant gratification. For those that it works, suggest a challenge e.g. changing sprites, or altering the code to see what happens, and while they're engaged with that, you can help others fix their code. At this point, there's not going to be a ton of debugging, but getting everyone's example working is really important so that they feel some achievement. With debugging though, just make sure you vocalise what you're doing, to keep kids engaged. The first time they jump ahead of you and say something like "oh, I had the wrong value there" is a huge step. Seeing as you don't have speakers and possibly not microphones and cameras available, what about starting with replicating a single scratch card for them to follow along with? They can group together to make a full game or project, and that would allow kids to grab one that they need for an idea. For instance, there's the scratch card that shows how to make a piece of clothing snap into the right position when dragged to a sprite. Something else that worked for us was to have a handout for kids to have a Scratch account before coming to the first 1 hour session. This meant that some had already had a play, but that they could also save their progress. In this day of tablets and mobile devices, kids relate this to when they can save game progress, and I've found it can be harder to get them motivated the next time, when they realise they have to re-create their project again. They'll also have something to 'take home' and show off, but also to build on later. One activity that has worked really well for my classes, is to show the kids how to do faux gravity, for a very very simple platform game. Once they have a character that they can move with keys and will sit on top of a 'level' they'll essentially be able to create their own game. We sometimes have done this, and then get the kids to go and play each other's games. With this, one thing to watch for, is that it's easy to have too ambitious a game idea, and then kids become frustrated when they realise how much code is needed. A good way to have a set scope, is just get the kids to draw a square on a piece of paper, put in some stick figures, and have a basic idea drawn out visually. That way, there's a defined scope for their first milestone i.e. reproducing their design in Scratch. Tell them to keep it real simple, as they can add extras once it is working. The important thing is that it works first. Then make sure you already have the extra features in your back pocket, so to speak. E.g. before the class, sit down and work out easy ways to do features such as score, change a one-player game to a two-player game (copy the first sprite and its code, then modify the code for the second player controls), or changing the game to make it multi level (change the background and player location when a goal sprite is collided with). To summarize: - do the activities yourself so that you know any gotchas beforehand (always helps to say, oh I ran into this one too) - try to get them making things straight away so they're not bored - verbalize any troubleshooting you do so they see the thought process and stay involved - keep the activity simple - allow them a way to save their work so they can show it off and add to it later - set simple challenges, and have something up your sleeve for the more advanced kids (there's always some) so you can help others troubleshoot This is my first reply so I'm trying to type fast enough that it wont time out :) Hope this helps.. justaboutfine

justaboutfine, ?Thank you so much! I love the idea of having them set up accounts before the class! In fact, I already emailed our youth director and asked her to add this to the registration process. I felt really bad last time because they had to scrap thier whole game; I made one and posted it on Scratch for those who wanted to add on to it later, but a lot of them hadcustomized their backdrops and sprites to make it more "theirs", and in that respect they would have had to redo some things. ?I like a lot of your ideas, actually! I wish that we had more classes soI cansee what the kids come up withon thier own. I did request that they bring their own, simple ideasin the class description, so hopefully I'll have some that are ready to go with ideas so that I can help the ones that need it more. I wholly expect to have all different levels of experience. I will definately be using the scratch cards as you suggested. Having them start with a simple idea and then build from there sounds much more productive then dragging them all through a game they are not really interested in. ?I will post my final curriculum (for one hour- LOL)here, and also let everyone know how my(now second) attempt went! ?Amy C.

